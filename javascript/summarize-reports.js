/**
 * This script uses the raw reports generated by axe-core from the evaluate-and-save-reports.js and
 * creates a CSV file that summarizes the reports in a flattened format.
 * You need to first run the evaluate-and-save-reports.js script to generate the raw reports.
 */
const fs = require('fs');

/** configure input data */
const TIME_STAMP_FOLDER_NAME = process.argv[2];
if(!TIME_STAMP_FOLDER_NAME) {
  console.error('Please provide a timestamp folder name as an argument.');
  return;
}
const BASE_PATH = `../data/${TIME_STAMP_FOLDER_NAME}/results`;

(async () => {
  /** get all the successfully collected raw reports first */
  const rawReports = (await fs.readdirSync(BASE_PATH, { recursive: true })).filter(file => file.endsWith('.json') && !file.includes('failed'));

  /** initialize the reports and issues */
  const reports = {};
  const issues = {};

  rawReports.forEach(async reportPath => {
    reports[reportPath] = {};

    const reportStr = await fs.readFileSync(`${BASE_PATH}/${reportPath}`);
    const report = JSON.parse(reportStr);

    /** Store the original URL */
    const url = report.url;
    reports[reportPath]['url'] = url;

    ['violations', 'passes'].forEach(v_or_p => {
      report[v_or_p].forEach(issue => {
        const { id: issueId, impact, tags, description, help, helpUrl, nodes } = issue;
        if(!issues[issueId]) issues[issueId] = { impact, description, help, helpUrl };
        if(!reports[reportPath][issueId]) reports[reportPath][issueId] = {};
        reports[reportPath][issueId][v_or_p] = nodes.length;
      });
    });

    /** Save CSV files */
    let csvContent = '';
    // await Object.keys(reports).forEach(reportPath => {
      // const url = reports[reportPath]['url'];
      // file is in the format of [category]/[website-id]_[page_id]_[page_type].json
      const resource_category = reportPath.split('/')[0]; // e.g., "data portal"
      const website_id = reportPath.split('/')[1].split('_')[0]; // e.g., "data-portal-row-0" or "hubmap"
      const page_id = reportPath.split('/')[1].split('_')[1]; // e.g., "home" or "unknown"
      const page_type = reportPath.split('/')[1].split('_')[2].split('.')[0]; // "home" or "unknown"

      /** Add the content */
      Object.keys(reports[reportPath]).forEach(issue => {
        if(issue === 'url') return; // we store the 'url' at the same level of issue id
        let { violations, passes } = reports[reportPath][issue];
        violations = violations ?? 0;
        passes = passes ?? 0;
        const total_checks = violations + passes;
        const ff = violations / total_checks;
        const { impact, description, help, helpUrl } = issues[issue];
        csvContent += `${resource_category},"${website_id}",${page_id},${page_type},"${url}",${issue},"${description}",${impact},"${help}",${helpUrl},${violations},${passes},${total_checks},${ff}\n`;
      });
    // });
    if(rawReports[0] === reportPath) {
      /** Add a header first */
      const header = 'resource_category,wesite_id,page_id,page_type,page_url,issue_id,issue_desc,issue_impact,issue_help,issue_url,violations,passes,total_checks,failure_rate\n';
      await fs.writeFileSync(`${BASE_PATH}/accessibility-status.csv`, header, error => {
        if(error) console.error(error);
      });
    }
    await fs.appendFileSync(`${BASE_PATH}/accessibility-status.csv`, csvContent, error => {
      if(error) console.error(error);
    });
    let issuesContent = '';
    /** Add a header first */
    issuesContent += 'issue_id,impact,description,help,url\n';
    /** Add the content */
    await Object.keys(issues).forEach(issueId => {
      const { impact, description, help, helpUrl } = issues[issueId];
      issuesContent += `${issueId},${impact},"${description}","${help}",${helpUrl}\n`;
    });
    fs.writeFileSync(`${BASE_PATH}/unique-issues.csv`, issuesContent, error => {
      if(error) console.error(error);
    });

  });
})();
